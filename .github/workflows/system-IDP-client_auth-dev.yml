name: Deploy client auth service of IDP to the Amazon ECS

on:
  push:
    tags:
      - dev/auth/**

env:
  AWS_REGION: ap-northeast-2 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: system/idp/auth-dev # set this to your Amazon ECR repository name
  ECS_SERVICE: system-IDP-auth-dev  # set this to your Amazon ECS service name
  ECS_CLUSTER: system-IDP-dev # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./.aws/dev/system-IDP-client_auth-dev.json # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: system-IDP-auth-container-dev # set this to the name of the container in the containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.BB_PAT_TOKEN }}

      - name: Update submodules recursively
        run: git submodule update --recursive --remote

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY__DEPLOYMENT_ECS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY__DEPLOYMENT_ECS }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./Dockerfile.auth -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            DATABASE_URI=${{ secrets.DATABASE_URI }}
            CACHE_HOST=${{ secrets.CACHE_HOST }}
            CACHE_PORT=${{ secrets.CACHE_PORT }}
            COOKIE_ENCRYPTION_KEY=${{ secrets.COOKIE_ENCRYPTION_KEY }}
            MEMBER_KEY_ENCRYPTION_KEY=${{ secrets.MEMBER_KEY_ENCRYPTION_KEY }}
            NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}

            IDP_COOKIE_NAME=${{ vars.IDP_COOKIE_NAME }}
            REDIRECT_COOKIE_NAME=${{ vars.REDIRECT_COOKIE_NAME }}
            DATABASE_IDLE_TIMEOUT=${{ vars.DATABASE_IDLE_TIMEOUT }}
            ID_TOKEN_ISS=${{ vars.ID_TOKEN_ISS }}
            LOG_CONNECTION_LIMIT=${{ vars.LOG_CONNECTION_LIMIT }}
            LOG_MAX_IDLE=${{ vars.LOG_MAX_IDLE }}
            MAIN_CONNECTION_LIMIT=${{ vars.MAIN_CONNECTION_LIMIT }}
            MAIN_MAX_IDLE=${{ vars.MAIN_MAX_IDLE }}
            NODE_ENV=${{ vars.NODE_ENV }}
            REFRESH_TOKEN_EXPIRE_IN=${{ vars.REFRESH_TOKEN_EXPIRE_IN }}
            SIGN_IN_URL=${{ vars.SIGN_IN_URL }}
            SIGN_UP_URL=${{ vars.SIGN_UP_URL }}
            TOKEN_EXPIRE_IN=${{ vars.TOKEN_EXPIRE_IN }}
            PASSPORT_EXPIRE_IN=${{ vars.PASSPORT_EXPIRE_IN }}

            KAKAO_CLIENT_ID=${{ vars.KAKAO_CLIENT_ID }}
            KAKAO_REDIRECT_URI=${{ vars.KAKAO_REDIRECT_URI }}
            NAVER_CLIENT_ID=${{ vars.NAVER_CLIENT_ID }}
            NAVER_REDIRECT_URI=${{ vars.NAVER_REDIRECT_URI }}

            GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }}
            GOOGLE_REDIRECT_URI=${{ vars.GOOGLE_REDIRECT_URI }}
            APPLE_CLIENT_ID=${{ vars.APPLE_CLIENT_ID }}
            APPLE_REDIRECT_URI=${{ vars.APPLE_REDIRECT_URI }}
            APPLE_AUTH_KEY=${{ vars.APPLE_AUTH_KEY }}
            APPLE_KEY_ID  =${{ vars.APPLE_KEY_ID }}
            APPLE_TEAM_ID=${{ vars.APPLE_TEAM_ID }}
   
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
